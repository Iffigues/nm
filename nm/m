33,34d32
< 080b8dbc R go.itab.runtime.errorString,error
< 080a4c00 r go.string.*
35a34
> 080b8dbc R go.itab.runtime.errorString,error
36a36
> 080a4c00 r go.string.*
60,224d59
< 0806e200 T runtime.(*addrRanges).add
< 0806e8a0 T runtime.(*addrRanges).cloneInto
< 0806e130 T runtime.(*addrRanges).findAddrGreaterEqual
< 0806e060 T runtime.(*addrRanges).findSucc
< 0806dfe0 T runtime.(*addrRanges).init
< 0806e720 T runtime.(*addrRanges).removeGreaterEqual
< 0806e6a0 T runtime.(*addrRanges).removeLast
< 0809b5a0 T runtime.(*boundsError).Error
< 0806ce70 T runtime.(*bucket).bp
< 0806ce20 T runtime.(*bucket).mp
< 0806f170 T runtime.(*consistentHeapStats).acquire
< 0806f290 T runtime.(*consistentHeapStats).release
< 0804c6c0 T runtime.(*cpuProfile).add
< 0804c920 T runtime.(*cpuProfile).addExtra
< 0804c820 T runtime.(*cpuProfile).addNonGo
< 0809b980 T runtime.(*errorAddressString).Error
< 0809b250 T runtime.(*errorString).Error
< 080588b0 T runtime.(*fixalloc).alloc
< 08068070 T runtime.(*gcBitsArena).tryAlloc
< 080609d0 T runtime.(*gcControllerState).commit
< 08060fc0 T runtime.(*gcControllerState).effectiveGrowthRatio
< 08060190 T runtime.(*gcControllerState).endCycle
< 08060660 T runtime.(*gcControllerState).enlistWorker
< 080607a0 T runtime.(*gcControllerState).findRunnableGCWorker
< 08097a60 T runtime.(*gcControllerState).findRunnableGCWorker.func1
< 0805f9c0 T runtime.(*gcControllerState).init
< 0805fea0 T runtime.(*gcControllerState).revise
< 08061060 T runtime.(*gcControllerState).setGCPercent
< 0805fa70 T runtime.(*gcControllerState).startCycle
< 08065190 T runtime.(*gcWork).balance
< 08065070 T runtime.(*gcWork).dispose
< 08064d00 T runtime.(*gcWork).init
< 08064d50 T runtime.(*gcWork).put
< 08064e20 T runtime.(*gcWork).putBatch
< 08064fb0 T runtime.(*gcWork).tryGet
< 0806ef40 T runtime.(*headTailIndex).incTail
< 08052550 T runtime.(*hmap).incrnoverflow
< 080525f0 T runtime.(*hmap).newoverflow
< 0804f540 T runtime.(*itab).init
< 0804f4d0 T runtime.(*itabTableType).add
< 0809b200 T runtime.(*itabTableType).add-fm
< 0804f2f0 T runtime.(*itabTableType).find
< 0804fc90 T runtime.(*lfstack).pop
< 0804fc10 T runtime.(*lfstack).push
< 08052490 T runtime.(*linearAlloc).alloc
< 0809b820 T runtime.(*lockRank).String
< 080573a0 T runtime.(*mcache).allocLarge
< 080512a0 T runtime.(*mcache).nextFree
< 08057830 T runtime.(*mcache).prepareForSweep
< 08057100 T runtime.(*mcache).refill
< 08057620 T runtime.(*mcache).releaseAll
< 08057930 T runtime.(*mcentral).cacheSpan
< 08057da0 T runtime.(*mcentral).grow
< 08057c80 T runtime.(*mcentral).uncacheSpan
< 08066570 T runtime.(*mheap).alloc
< 08066650 T runtime.(*mheap).alloc.func1
< 080666e0 T runtime.(*mheap).allocManual
< 08066940 T runtime.(*mheap).allocMSpanLocked
< 080667e0 T runtime.(*mheap).allocNeedsZero
< 08066a30 T runtime.(*mheap).allocSpan
< 08067470 T runtime.(*mheap).freeManual
< 080673b0 T runtime.(*mheap).freeSpan
< 08067410 T runtime.(*mheap).freeSpan.func1
< 080674e0 T runtime.(*mheap).freeSpanLocked
< 08067060 T runtime.(*mheap).grow
< 08065bc0 T runtime.(*mheap).init
< 08063410 T runtime.(*mheap).nextSpanForSweep
< 08065fe0 T runtime.(*mheap).reclaim
< 08066250 T runtime.(*mheap).reclaimChunk
< 08066750 T runtime.(*mheap).setSpans
< 08050ab0 T runtime.(*mheap).sysAlloc
< 080557b0 T runtime.(*mspan).countAlloc
< 08063cf0 T runtime.(*mspan).ensureSwept
< 08067920 T runtime.(*mspan).init
< 08054670 T runtime.(*mspan).nextFreeIndex
< 080545d0 T runtime.(*mspan).refillAllocCache
< 080648a0 T runtime.(*mspan).reportZombies
< 08067b20 T runtime.(*mSpanList).insert
< 080679c0 T runtime.(*mSpanList).remove
< 0807f530 T runtime.(*p).destroy
< 0807f880 T runtime.(*p).destroy.func1
< 0807f380 T runtime.(*p).init
< 08069c10 T runtime.(*pageAlloc).alloc
< 08068c00 T runtime.(*pageAlloc).allocRange
< 0806ad70 T runtime.(*pageAlloc).allocToCache
< 08068ef0 T runtime.(*pageAlloc).find
< 08069ac0 T runtime.(*pageAlloc).find.func1
< 08068e60 T runtime.(*pageAlloc).findMappedAddr
< 08069e80 T runtime.(*pageAlloc).free
< 080685b0 T runtime.(*pageAlloc).grow
< 08068460 T runtime.(*pageAlloc).init
< 08061a70 T runtime.(*pageAlloc).scavenge
< 08061f50 T runtime.(*pageAlloc).scavengeOne
< 08062270 T runtime.(*pageAlloc).scavengeOne.func3
< 08062390 T runtime.(*pageAlloc).scavengeRangeLocked
< 08061e20 T runtime.(*pageAlloc).scavengeReserve
< 08061d60 T runtime.(*pageAlloc).scavengeStartGen
< 08061ed0 T runtime.(*pageAlloc).scavengeUnreserve
< 0806a430 T runtime.(*pageAlloc).sysGrow
< 0806a250 T runtime.(*pageAlloc).sysInit
< 08068770 T runtime.(*pageAlloc).update
< 0806b5a0 T runtime.(*pageBits).clearAll
< 0806b2f0 T runtime.(*pageBits).clearRange
< 0806b600 T runtime.(*pageBits).popcntRange
< 0806b290 T runtime.(*pageBits).setAll
< 0806aff0 T runtime.(*pageBits).setRange
< 0806a5b0 T runtime.(*pageCache).alloc
< 0806a760 T runtime.(*pageCache).allocN
< 0806ab20 T runtime.(*pageCache).flush
< 0806c380 T runtime.(*pallocBits).find
< 0806c900 T runtime.(*pallocBits).findLargeN
< 0806c4a0 T runtime.(*pallocBits).findSmallN
< 0806bc10 T runtime.(*pallocBits).summarize
< 0806cd40 T runtime.(*pallocData).allocAll
< 0806cce0 T runtime.(*pallocData).allocRange
< 080628f0 T runtime.(*pallocData).findScavengeCandidate
< 08062790 T runtime.(*pallocData).hasScavengeCandidate
< 0809ba00 T runtime.(*plainError).Error
< 08083330 T runtime.(*profBuf).canWriteRecord
< 08083400 T runtime.(*profBuf).canWriteTwoRecords
< 08083260 T runtime.(*profBuf).incrementOverflow
< 08083150 T runtime.(*profBuf).takeOverflow
< 080838f0 T runtime.(*profBuf).wakeupExtra
< 080834f0 T runtime.(*profBuf).write
< 08084870 T runtime.(*rwmutex).rlock
< 08084900 T runtime.(*rwmutex).rlock.func1
< 080849a0 T runtime.(*rwmutex).runlock
< 08085430 T runtime.(*semaRoot).dequeue
< 08085090 T runtime.(*semaRoot).queue
< 08085760 T runtime.(*semaRoot).rotateLeft
< 08085880 T runtime.(*semaRoot).rotateRight
< 08085db0 T runtime.(*sigctxt).preparePanic
< 0806eb30 T runtime.(*spanSet).pop
< 0806e950 T runtime.(*spanSet).push
< 0806ecf0 T runtime.(*spanSet).reset
< 0806ee80 T runtime.(*spanSetBlockAlloc).alloc
< 0806eef0 T runtime.(*spanSetBlockAlloc).free
< 08063160 T runtime.(*stackScanState).addObject
< 08063050 T runtime.(*stackScanState).getPtr
< 08062f50 T runtime.(*stackScanState).putPtr
< 080633a0 T runtime.(*sweepClass).update
< 08063df0 T runtime.(*sweepLocked).sweep
< 08063850 T runtime.(*sweepLocker).dispose
< 08063780 T runtime.(*sweepLocker).tryAcquire
< 0806f040 T runtime.(*sysMemStat).add
< 0804edb0 T runtime.(*timeHistogram).record
< 0808fd30 T runtime.(*traceAlloc).alloc
< 0808fc30 T runtime.(*traceStackTable).find
< 0808fce0 T runtime.(*traceStackTable).newStack
< 0808fa80 T runtime.(*traceStackTable).put
< 080943c0 T runtime.(*_type).pkgpath
< 08094270 T runtime.(*_type).string
< 08094a50 T runtime.(*_type).textOff
< 08094300 T runtime.(*_type).uncommon
< 0804cd30 T runtime.(*TypeAssertionError).Error
< 0804c5c0 T runtime.(*waitq).dequeue
< 0809b8b0 T runtime.(*waitReason).String
< 0806f360 T runtime.(*wbBuf).reset
< 08065280 T runtime.(*workbuf).checkempty
< 08065230 T runtime.(*workbuf).checknonempty
< 080f40a0 d runtime..gobytes.4
< 080f4160 d runtime..gobytes.5
< 080f4090 d runtime..gobytes.6
< 080f4120 d runtime..gobytes.7
< 080f40e0 D runtime..inittask
234a70,76
> 0806e200 T runtime.(*addrRanges).add
> 0806e8a0 T runtime.(*addrRanges).cloneInto
> 0806e130 T runtime.(*addrRanges).findAddrGreaterEqual
> 0806e060 T runtime.(*addrRanges).findSucc
> 0806dfe0 T runtime.(*addrRanges).init
> 0806e720 T runtime.(*addrRanges).removeGreaterEqual
> 0806e6a0 T runtime.(*addrRanges).removeLast
254d95
< 08079020 T runtime.allocm.func1
256a98
> 08079020 T runtime.allocm.func1
298a141
> 0809b5a0 T runtime.(*boundsError).Error
302a146
> 0806ce70 T runtime.(*bucket).bp
303a148
> 0806ce20 T runtime.(*bucket).mp
325d169
< 080b8b20 r runtime.call16.args_stackmap
329a174
> 080b8b20 r runtime.call16.args_stackmap
341d185
< 080b8ba0 r runtime.call32.args_stackmap
343a188
> 080b8ba0 r runtime.call32.args_stackmap
397d241
< 0804c3c0 T runtime.chanrecv.func1
398a243
> 0804c3c0 T runtime.chanrecv.func1
401d245
< 0804b930 T runtime.chansend.func1
402a247
> 0804b930 T runtime.chansend.func1
425a271,272
> 0806f170 T runtime.(*consistentHeapStats).acquire
> 0806f290 T runtime.(*consistentHeapStats).release
433a281,283
> 0804c6c0 T runtime.(*cpuProfile).add
> 0804c920 T runtime.(*cpuProfile).addExtra
> 0804c820 T runtime.(*cpuProfile).addNonGo
442a293
> 08098320 T runtime/debug.SetTraceback
492a344
> 0809b980 T runtime.(*errorAddressString).Error
493a346
> 0809b250 T runtime.(*errorString).Error
544a398
> 080588b0 T runtime.(*fixalloc).alloc
557d410
< 08072090 T runtime.freedefer.func1
558a412
> 08072090 T runtime.freedefer.func1
585d438
< 0805d030 T runtime.gcAssistAlloc.func1
586a440
> 0805d030 T runtime.gcAssistAlloc.func1
588a443
> 08109438 B runtime.gcBgMarkWorkerCount
591d445
< 08109438 B runtime.gcBgMarkWorkerCount
594a449
> 08068070 T runtime.(*gcBitsArena).tryAlloc
597a453,462
> 080609d0 T runtime.(*gcControllerState).commit
> 08060fc0 T runtime.(*gcControllerState).effectiveGrowthRatio
> 08060190 T runtime.(*gcControllerState).endCycle
> 08060660 T runtime.(*gcControllerState).enlistWorker
> 080607a0 T runtime.(*gcControllerState).findRunnableGCWorker
> 08097a60 T runtime.(*gcControllerState).findRunnableGCWorker.func1
> 0805f9c0 T runtime.(*gcControllerState).init
> 0805fea0 T runtime.(*gcControllerState).revise
> 08061060 T runtime.(*gcControllerState).setGCPercent
> 0805fa70 T runtime.(*gcControllerState).startCycle
607a473
> 08109440 B runtime.gcMarkDoneFlushed
612d477
< 08109440 B runtime.gcMarkDoneFlushed
637a503,508
> 08065190 T runtime.(*gcWork).balance
> 08065070 T runtime.(*gcWork).dispose
> 08064d00 T runtime.(*gcWork).init
> 08064d50 T runtime.(*gcWork).put
> 08064e20 T runtime.(*gcWork).putBatch
> 08064fb0 T runtime.(*gcWork).tryGet
658a530,533
> 080f40a0 d runtime..gobytes.4
> 080f4160 d runtime..gobytes.5
> 080f4090 d runtime..gobytes.6
> 080f4120 d runtime..gobytes.7
701a577
> 0806ef40 T runtime.(*headTailIndex).incTail
709a586,587
> 08052550 T runtime.(*hmap).incrnoverflow
> 080525f0 T runtime.(*hmap).newoverflow
723a602
> 080f40e0 D runtime..inittask
730a610,671
> 0804a040 T runtime/internal/atomic.And
> 0804a010 T runtime/internal/atomic.And8
> 080b8a00 r runtime/internal/atomic.And8.args_stackmap
> 080b89f0 r runtime/internal/atomic.And.args_stackmap
> 08049de0 T runtime/internal/atomic.Cas
> 08049e90 T runtime/internal/atomic.Cas64
> 080b8d70 r runtime/internal/atomic.Cas64.args_stackmap
> 080b8ca0 r runtime/internal/atomic.Cas.args_stackmap
> 08049e00 T runtime/internal/atomic.Casint64
> 080b8d80 r runtime/internal/atomic.Casint64.args_stackmap
> 08049ec0 T runtime/internal/atomic.Casp1
> 080b8cc0 r runtime/internal/atomic.Casp1.args_stackmap
> 08049e20 T runtime/internal/atomic.CasRel
> 080b8cb0 r runtime/internal/atomic.CasRel.args_stackmap
> 08049e10 T runtime/internal/atomic.Casuintptr
> 080b8cd0 r runtime/internal/atomic.Casuintptr.args_stackmap
> 08049dc0 T runtime/internal/atomic.Load
> 08049fb0 T runtime/internal/atomic.Load64
> 080b8ce0 r runtime/internal/atomic.Load64.args_stackmap
> 08049d70 T runtime/internal/atomic.Load8
> 08049d60 T runtime/internal/atomic.LoadAcq
> 08049e70 T runtime/internal/atomic.Loadint64
> 080b8cf0 r runtime/internal/atomic.Loadint64.args_stackmap
> 08049dd0 T runtime/internal/atomic.Loadp
> 08049e40 T runtime/internal/atomic.Loaduint
> 080b8d00 r runtime/internal/atomic.Loaduint.args_stackmap
> 08049e30 T runtime/internal/atomic.Loaduintptr
> 080b8d10 r runtime/internal/atomic.Loaduintptr.args_stackmap
> 0804a030 T runtime/internal/atomic.Or
> 0804a000 T runtime/internal/atomic.Or8
> 080b8a20 r runtime/internal/atomic.Or8.args_stackmap
> 080b8a10 r runtime/internal/atomic.Or.args_stackmap
> 08049d80 T runtime/internal/atomic.panicUnaligned
> 08049f90 T runtime/internal/atomic.Store
> 08049fd0 T runtime/internal/atomic.Store64
> 080b8a40 r runtime/internal/atomic.Store64.args_stackmap
> 0804a020 T runtime/internal/atomic.Store8
> 080b8a50 r runtime/internal/atomic.Store8.args_stackmap
> 080b8a30 r runtime/internal/atomic.Store.args_stackmap
> 08049f80 T runtime/internal/atomic.StorepNoWB
> 080b8a70 r runtime/internal/atomic.StorepNoWB.args_stackmap
> 08049fa0 T runtime/internal/atomic.StoreRel
> 080b8a60 r runtime/internal/atomic.StoreRel.args_stackmap
> 08049e50 T runtime/internal/atomic.Storeuintptr
> 080b8a80 r runtime/internal/atomic.Storeuintptr.args_stackmap
> 08049ee0 T runtime/internal/atomic.Xadd
> 08049f00 T runtime/internal/atomic.Xadd64
> 080b8d90 r runtime/internal/atomic.Xadd64.args_stackmap
> 080b8d20 r runtime/internal/atomic.Xadd.args_stackmap
> 08049e80 T runtime/internal/atomic.Xaddint64
> 080b8da0 r runtime/internal/atomic.Xaddint64.args_stackmap
> 08049e60 T runtime/internal/atomic.Xadduintptr
> 080b8d30 r runtime/internal/atomic.Xadduintptr.args_stackmap
> 08049f40 T runtime/internal/atomic.Xchg
> 08049f50 T runtime/internal/atomic.Xchg64
> 080b8db0 r runtime/internal/atomic.Xchg64.args_stackmap
> 080b8d40 r runtime/internal/atomic.Xchg.args_stackmap
> 08049d20 T runtime/internal/sys.Ctz32
> 08049cf0 T runtime/internal/sys.Ctz64
> 08049d40 T runtime/internal/sys.Ctz8
> 080f41a0 D runtime/internal/sys.deBruijn64tab
> 080f4480 D runtime/internal/sys.len8tab
740a682
> 0804f540 T runtime.(*itab).init
745a688,690
> 0804f4d0 T runtime.(*itabTableType).add
> 0809b200 T runtime.(*itabTableType).add-fm
> 0804f2f0 T runtime.(*itabTableType).find
753a699,701
> 0804fc90 T runtime.(*lfstack).pop
> 0804fc10 T runtime.(*lfstack).push
> 08052490 T runtime.(*linearAlloc).alloc
757a706
> 0809b820 T runtime.(*lockRank).String
786d734
< 0805c5f0 T runtime.markroot.func1
788a737
> 0805c5f0 T runtime.markroot.func1
796a746,750
> 080573a0 T runtime.(*mcache).allocLarge
> 080512a0 T runtime.(*mcache).nextFree
> 08057830 T runtime.(*mcache).prepareForSweep
> 08057100 T runtime.(*mcache).refill
> 08057620 T runtime.(*mcache).releaseAll
797a752,754
> 08057930 T runtime.(*mcentral).cacheSpan
> 08057da0 T runtime.(*mcentral).grow
> 08057c80 T runtime.(*mcentral).uncacheSpan
824a782,798
> 08066570 T runtime.(*mheap).alloc
> 08066650 T runtime.(*mheap).alloc.func1
> 080666e0 T runtime.(*mheap).allocManual
> 08066940 T runtime.(*mheap).allocMSpanLocked
> 080667e0 T runtime.(*mheap).allocNeedsZero
> 08066a30 T runtime.(*mheap).allocSpan
> 08067470 T runtime.(*mheap).freeManual
> 080673b0 T runtime.(*mheap).freeSpan
> 08067410 T runtime.(*mheap).freeSpan.func1
> 080674e0 T runtime.(*mheap).freeSpanLocked
> 08067060 T runtime.(*mheap).grow
> 08065bc0 T runtime.(*mheap).init
> 08063410 T runtime.(*mheap).nextSpanForSweep
> 08065fe0 T runtime.(*mheap).reclaim
> 08066250 T runtime.(*mheap).reclaimChunk
> 08066750 T runtime.(*mheap).setSpans
> 08050ab0 T runtime.(*mheap).sysAlloc
852a827,834
> 080557b0 T runtime.(*mspan).countAlloc
> 08063cf0 T runtime.(*mspan).ensureSwept
> 08067920 T runtime.(*mspan).init
> 08067b20 T runtime.(*mSpanList).insert
> 080679c0 T runtime.(*mSpanList).remove
> 08054670 T runtime.(*mspan).nextFreeIndex
> 080545d0 T runtime.(*mspan).refillAllocCache
> 080648a0 T runtime.(*mspan).reportZombies
896d877
< 0807e150 T runtime.newproc.func1
897a879
> 0807e150 T runtime.newproc.func1
919a902,936
> 08069c10 T runtime.(*pageAlloc).alloc
> 08068c00 T runtime.(*pageAlloc).allocRange
> 0806ad70 T runtime.(*pageAlloc).allocToCache
> 08068ef0 T runtime.(*pageAlloc).find
> 08069ac0 T runtime.(*pageAlloc).find.func1
> 08068e60 T runtime.(*pageAlloc).findMappedAddr
> 08069e80 T runtime.(*pageAlloc).free
> 080685b0 T runtime.(*pageAlloc).grow
> 08068460 T runtime.(*pageAlloc).init
> 08061a70 T runtime.(*pageAlloc).scavenge
> 08061f50 T runtime.(*pageAlloc).scavengeOne
> 08062270 T runtime.(*pageAlloc).scavengeOne.func3
> 08062390 T runtime.(*pageAlloc).scavengeRangeLocked
> 08061e20 T runtime.(*pageAlloc).scavengeReserve
> 08061d60 T runtime.(*pageAlloc).scavengeStartGen
> 08061ed0 T runtime.(*pageAlloc).scavengeUnreserve
> 0806a430 T runtime.(*pageAlloc).sysGrow
> 0806a250 T runtime.(*pageAlloc).sysInit
> 08068770 T runtime.(*pageAlloc).update
> 0806b5a0 T runtime.(*pageBits).clearAll
> 0806b2f0 T runtime.(*pageBits).clearRange
> 0806b600 T runtime.(*pageBits).popcntRange
> 0806b290 T runtime.(*pageBits).setAll
> 0806aff0 T runtime.(*pageBits).setRange
> 0806a5b0 T runtime.(*pageCache).alloc
> 0806a760 T runtime.(*pageCache).allocN
> 0806ab20 T runtime.(*pageCache).flush
> 0806c380 T runtime.(*pallocBits).find
> 0806c900 T runtime.(*pallocBits).findLargeN
> 0806c4a0 T runtime.(*pallocBits).findSmallN
> 0806bc10 T runtime.(*pallocBits).summarize
> 0806cd40 T runtime.(*pallocData).allocAll
> 0806cce0 T runtime.(*pallocData).allocRange
> 080628f0 T runtime.(*pallocData).findScavengeCandidate
> 08062790 T runtime.(*pallocData).hasScavengeCandidate
949a967,968
> 0807f530 T runtime.(*p).destroy
> 0807f880 T runtime.(*p).destroy.func1
952d970
< 08052130 T runtime.persistentalloc.func1
953a972
> 08052130 T runtime.persistentalloc.func1
959a979
> 0807f380 T runtime.(*p).init
962a983
> 0809ba00 T runtime.(*plainError).Error
1008a1030,1035
> 08083330 T runtime.(*profBuf).canWriteRecord
> 08083400 T runtime.(*profBuf).canWriteTwoRecords
> 08083260 T runtime.(*profBuf).incrementOverflow
> 08083150 T runtime.(*profBuf).takeOverflow
> 080838f0 T runtime.(*profBuf).wakeupExtra
> 080834f0 T runtime.(*profBuf).write
1063a1091,1093
> 08084870 T runtime.(*rwmutex).rlock
> 08084900 T runtime.(*rwmutex).rlock.func1
> 080849a0 T runtime.(*rwmutex).runlock
1084a1115,1118
> 08085430 T runtime.(*semaRoot).dequeue
> 08085090 T runtime.(*semaRoot).queue
> 08085760 T runtime.(*semaRoot).rotateLeft
> 08085880 T runtime.(*semaRoot).rotateRight
1107a1142
> 08085db0 T runtime.(*sigctxt).preparePanic
1137a1173,1174
> 0806ee80 T runtime.(*spanSetBlockAlloc).alloc
> 0806eef0 T runtime.(*spanSetBlockAlloc).free
1138a1176,1178
> 0806eb30 T runtime.(*spanSet).pop
> 0806e950 T runtime.(*spanSet).push
> 0806ecf0 T runtime.(*spanSet).reset
1149a1190,1192
> 08063160 T runtime.(*stackScanState).addObject
> 08063050 T runtime.(*stackScanState).getPtr
> 08062f50 T runtime.(*stackScanState).putPtr
1170a1214,1217
> 080633a0 T runtime.(*sweepClass).update
> 08063df0 T runtime.(*sweepLocked).sweep
> 08063850 T runtime.(*sweepLocker).dispose
> 08063780 T runtime.(*sweepLocker).tryAcquire
1180a1228
> 0806f040 T runtime.(*sysMemStat).add
1202a1251
> 0804edb0 T runtime.(*timeHistogram).record
1208a1258
> 0808fd30 T runtime.(*traceAlloc).alloc
1245a1296,1298
> 0808fc30 T runtime.(*traceStackTable).find
> 0808fce0 T runtime.(*traceStackTable).newStack
> 0808fa80 T runtime.(*traceStackTable).put
1246a1300
> 0804cd30 T runtime.(*TypeAssertionError).Error
1252a1307
> 080943c0 T runtime.(*_type).pkgpath
1254a1310,1312
> 08094270 T runtime.(*_type).string
> 08094a50 T runtime.(*_type).textOff
> 08094300 T runtime.(*_type).uncommon
1286a1345,1346
> 0804c5c0 T runtime.(*waitq).dequeue
> 0809b8b0 T runtime.(*waitReason).String
1296d1355
< 08097b50 T runtime.wbBufFlush.func1
1297a1357,1358
> 08097b50 T runtime.wbBufFlush.func1
> 0806f360 T runtime.(*wbBuf).reset
1299a1361,1362
> 08065280 T runtime.(*workbuf).checkempty
> 08065230 T runtime.(*workbuf).checknonempty
1310,1372d1372
< 08098320 T runtime/debug.SetTraceback
< 0804a040 T runtime/internal/atomic.And
< 080b89f0 r runtime/internal/atomic.And.args_stackmap
< 0804a010 T runtime/internal/atomic.And8
< 080b8a00 r runtime/internal/atomic.And8.args_stackmap
< 08049de0 T runtime/internal/atomic.Cas
< 080b8ca0 r runtime/internal/atomic.Cas.args_stackmap
< 08049e90 T runtime/internal/atomic.Cas64
< 080b8d70 r runtime/internal/atomic.Cas64.args_stackmap
< 08049e00 T runtime/internal/atomic.Casint64
< 080b8d80 r runtime/internal/atomic.Casint64.args_stackmap
< 08049ec0 T runtime/internal/atomic.Casp1
< 080b8cc0 r runtime/internal/atomic.Casp1.args_stackmap
< 08049e20 T runtime/internal/atomic.CasRel
< 080b8cb0 r runtime/internal/atomic.CasRel.args_stackmap
< 08049e10 T runtime/internal/atomic.Casuintptr
< 080b8cd0 r runtime/internal/atomic.Casuintptr.args_stackmap
< 08049dc0 T runtime/internal/atomic.Load
< 08049fb0 T runtime/internal/atomic.Load64
< 080b8ce0 r runtime/internal/atomic.Load64.args_stackmap
< 08049d70 T runtime/internal/atomic.Load8
< 08049d60 T runtime/internal/atomic.LoadAcq
< 08049e70 T runtime/internal/atomic.Loadint64
< 080b8cf0 r runtime/internal/atomic.Loadint64.args_stackmap
< 08049dd0 T runtime/internal/atomic.Loadp
< 08049e40 T runtime/internal/atomic.Loaduint
< 080b8d00 r runtime/internal/atomic.Loaduint.args_stackmap
< 08049e30 T runtime/internal/atomic.Loaduintptr
< 080b8d10 r runtime/internal/atomic.Loaduintptr.args_stackmap
< 0804a030 T runtime/internal/atomic.Or
< 080b8a10 r runtime/internal/atomic.Or.args_stackmap
< 0804a000 T runtime/internal/atomic.Or8
< 080b8a20 r runtime/internal/atomic.Or8.args_stackmap
< 08049d80 T runtime/internal/atomic.panicUnaligned
< 08049f90 T runtime/internal/atomic.Store
< 080b8a30 r runtime/internal/atomic.Store.args_stackmap
< 08049fd0 T runtime/internal/atomic.Store64
< 080b8a40 r runtime/internal/atomic.Store64.args_stackmap
< 0804a020 T runtime/internal/atomic.Store8
< 080b8a50 r runtime/internal/atomic.Store8.args_stackmap
< 08049f80 T runtime/internal/atomic.StorepNoWB
< 080b8a70 r runtime/internal/atomic.StorepNoWB.args_stackmap
< 08049fa0 T runtime/internal/atomic.StoreRel
< 080b8a60 r runtime/internal/atomic.StoreRel.args_stackmap
< 08049e50 T runtime/internal/atomic.Storeuintptr
< 080b8a80 r runtime/internal/atomic.Storeuintptr.args_stackmap
< 08049ee0 T runtime/internal/atomic.Xadd
< 080b8d20 r runtime/internal/atomic.Xadd.args_stackmap
< 08049f00 T runtime/internal/atomic.Xadd64
< 080b8d90 r runtime/internal/atomic.Xadd64.args_stackmap
< 08049e80 T runtime/internal/atomic.Xaddint64
< 080b8da0 r runtime/internal/atomic.Xaddint64.args_stackmap
< 08049e60 T runtime/internal/atomic.Xadduintptr
< 080b8d30 r runtime/internal/atomic.Xadduintptr.args_stackmap
< 08049f40 T runtime/internal/atomic.Xchg
< 080b8d40 r runtime/internal/atomic.Xchg.args_stackmap
< 08049f50 T runtime/internal/atomic.Xchg64
< 080b8db0 r runtime/internal/atomic.Xchg64.args_stackmap
< 08049d20 T runtime/internal/sys.Ctz32
< 08049cf0 T runtime/internal/sys.Ctz64
< 08049d40 T runtime/internal/sys.Ctz8
< 080f41a0 D runtime/internal/sys.deBruijn64tab
< 080f4480 D runtime/internal/sys.len8tab
